# -*- coding: utf-8 -*-
"""Linear_Reression_Housing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0uTD1kbKDU9Zm6WuuoB5Oz54n4vwe1c
"""

## Linear Regression
#Hosuing price prediction

# Commented out IPython magic to ensure Python compatibility.
from sklearn.datasets import fetch_california_housing
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

df = fetch_california_housing()
type(df)

df.feature_names

df

#convert into Datafram from Key,value pair
dataset=pd.DataFrame(df.data)
dataset.columns = df.feature_names
dataset

dataset.head()

dataset['price'] = df.target

dataset.head()

#Diving the Dataset into independent and dependent features
X = dataset.iloc[:,:-1]
X.head()
#independent feature

Y = dataset.iloc[:,-1]
Y.head() #Dependent Feature

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.33,random_state=42)

#the model with the lower negative value is actually better.

#In linear Regession go with Ridge or Lasso due to Hyper parameter turning
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score

lin_reg = LinearRegression()

lin_reg.fit(x_train,y_train)

mse = cross_val_score(lin_reg,x_train,y_train,scoring="neg_mean_squared_error",cv=5)

mean_mse = np.mean(mse)

print(mean_mse)

#Ridge Regression
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV

ridge = Ridge()

param = {'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20]}

ridge_regressor = GridSearchCV(ridge,param,scoring="neg_mean_squared_error",cv=5)

ridge_regressor.fit(x_train,y_train)

#Best Parameter

print(ridge_regressor.best_params_)

print(ridge_regressor.best_score_)

#Lasso Regression
from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV

lasso = Lasso()

param = {'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20]}

lasso_regressor = GridSearchCV(lasso,param,scoring="neg_mean_squared_error",cv=5)

lasso_regressor.fit(x_train,y_train)

print(lasso_regressor.best_params_)

print(lasso_regressor.best_score_)

y_pred_lasso = lasso_regressor.predict(x_test)
y_pred_ridge = ridge_regressor.predict(x_test)
y_pred_linear = lin_reg.predict(x_test)

from sklearn.metrics import r2_score

r2_score1 = r2_score(y_pred_lasso,y_test)
r2_score2 = r2_score(y_pred_ridge,y_test)
r2_score3 = r2_score(y_pred_linear,y_test)

print("Lasso Regression")
print(r2_score1)
print("Ridge Regression")
print(r2_score2)
print("Linear Regression")
print(r2_score3)

